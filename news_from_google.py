import os
import json
import logging
import aiohttp
import asyncio
import random
from bs4 import BeautifulSoup

API_TOKEN = os.getenv("API_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")
SENT_LIST_FILE = 'dump.json'
KEYWORDS = [
    "–æ—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–æ–Ω—Ç–∞–Ω–æ–≤ 2025",
    "—Ä–µ—Å—Ç–∞–≤—Ä–∞—Ü–∏—è —Ñ–æ–Ω—Ç–∞–Ω–∞ 2026",
    "—Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ —Ñ–æ–Ω—Ç–∞–Ω–∞ 2025",
    "–≥–æ–ª–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ —Ñ–æ–Ω—Ç–∞–Ω—ã 2026",
    "—Å–≤–µ—Ç–æ–º—É–∑—ã–∫–∞–ª—å–Ω—ã–π —Ñ–æ–Ω—Ç–∞–Ω 2025",
    "–ü–µ—à–µ—Ö–æ–¥–Ω—ã–π —Ñ–æ–Ω—Ç–∞–Ω 2026",
    "–†–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è —Ñ–æ–Ω—Ç–∞–Ω–æ–≤ 2025",
    "–ü–æ—é—â–∏–µ —Ñ–æ–Ω—Ç–∞–Ω—ã 2026",
    "–ú—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã–π —Ñ–æ–Ω—Ç–∞–Ω 2025",
    "–ú—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã–π —Ñ–æ–Ω—Ç–∞–Ω 2026",
    "–ü–æ—é—â–∏–µ —Ñ–æ–Ω—Ç–∞–Ω—ã 2025",
    "–†–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è —Ñ–æ–Ω—Ç–∞–Ω–æ–≤ 2026",
    "–ü–µ—à–µ—Ö–æ–¥–Ω—ã–π —Ñ–æ–Ω—Ç–∞–Ω 2025",
    "—Å–≤–µ—Ç–æ–º—É–∑—ã–∫–∞–ª—å–Ω—ã–π —Ñ–æ–Ω—Ç–∞–Ω 2026",
    "–≥–æ–ª–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ —Ñ–æ–Ω—Ç–∞–Ω—ã 2025",
    "—Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ —Ñ–æ–Ω—Ç–∞–Ω–∞ 2026",
    "—Ä–µ—Å—Ç–∞–≤—Ä–∞—Ü–∏—è —Ñ–æ–Ω—Ç–∞–Ω–∞ 2025",
    "–æ—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–æ–Ω—Ç–∞–Ω–æ–≤ 2026",
]
MUST_HAVE_WORDS = {"–§–æ–Ω—Ç–∞–Ω", "—Ñ–æ–Ω—Ç–∞–Ω", "—Å–≤–µ—Ç–æ–º—É–∑—ã–∫–∞–ª—å–Ω—ã–π"}
IGNORE_WORDS = {"–û–±—ä—è–≤–ª–µ–Ω–∏—è", "–ê–∫—Ü–∏", "–∞–∫—Ü–∏", "–≠–∫—Å–∫—É—Ä—Å", "—ç–∫—Å–∫—É—Ä—Å", "–ö—É–ø–∏—Ç", "–∫—É–ø–∏—Ç", "–£—Å–ª—É–≥–∏", "—Ä—É–∫–∞–º", "–ì–µ—Ä–æ–Ω–∞", "–≥–µ—Ä–æ–Ω–∞", "–ª—ã–∂–Ω", "—Ç—Ä–∞—Å—Å", "–ö–æ–º–º—É–Ω–∞", "–∫–æ–º–º—É–Ω–∞", "–í–æ–¥–æ–∫–∞–Ω–∞–ª", "–ñ–∏–ª–æ", "–∂–∏–ª–æ", "–∂–∏–ª—å—Ü", "–õ–µ–¥—è–Ω–æ", "–ª–µ–¥—è–Ω–æ", "—Ç—Ä—É–±", "–∞–≤–∞—Ä–∏–π", "–∑–∞–±–∏–ª", "–±—å—ë—Ç", "–∏–∑-–ø–æ–¥", "—Å–∏—Ç—É–∞—Ü", "–ø–∏—Ç—å–µ–≤", "–∫–∏–ø—è—Ç", "–∫–∞–Ω–∞–ª–∏–∑", "–ø–∞—Ö—É—á–∏–π", "–Ω–µ—á–∏—Å—Ç–æ—Ç", "—Ñ–µ–∫–∞–ª", "–ü–µ—Ç–µ—Ä–≥–æ—Ñ", "–ø–µ—Ç–µ—Ä–≥–æ—Ñ", "–ù–µ—Ñ—Ç", "–Ω–µ—Ñ—Ç", "–ì–∞–∑–æ–≤", "–≥–∞–∑–æ–≤", "–Ω–µ–¥—Ä", "–º–µ—Å—Ç–æ—Ä–æ–∂", "–¥–æ–±—ã–≤–∞", "2024", "2023", "2022", "2021", "2020", "2019", "2018", "2017", "2016", "2015", "2014", "2013"}
IGNORE_WORDS_LINK = {"instagram", "tiktok", "livejournal", "fontanka", "avito", "2024", "2023", "2022", "2021", "2020", "2019", "2018", "2017", "2016", "2015", "2014", "2013"}
USER_AGENTS = [
        "Mozilla/5.0 (Windows NT 6.1; rv:109.0) Gecko/20100101 Firefox/113.0", 
        "Mozilla/5.0 (Android 12; Mobile; rv:109.0) Gecko/113.0 Firefox/113.0", 
        "Opera/9.80 (X11; Linux i686; Ubuntu/14.10) Presto/2.12.388 Version/12.16", 
        "Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:21.0) Gecko/20130331 Firefox/21.0", 
        "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:109.0) Gecko/20100101 Firefox/113.0", 
        "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36", 
        "Mozilla/5.0 (X11; OpenBSD i386) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/36.0.1985.125 Safari/537.36", 
        "Mozilla/5.0 (X11; CrOS i686 4319.74.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36", 
        "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36", 
        "Mozilla/5.0 (Macintosh; Intel Mac OS X 13_1) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.1 Safari/605.1.15", 
        "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36", 
        "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.0.0 Safari/537.36 Edg/113.0.1774.35", 
        "Mozilla/5.0 (iPad; CPU OS 5_1 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko ) Version/5.1 Mobile/9B176 Safari/7534.48.3", 
        "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.0.0 Safari/537.36 Edg/113.0.1774.35", 
        "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.0.0 Safari/537.36 Edg/113.0.1774.35", 
]
logging.basicConfig(level=logging.DEBUG)

# –ó–∞–≥—Ä—É–∑–∫–∞ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
def load_sent_news():
    if os.path.exists(SENT_LIST_FILE):
        with open(SENT_LIST_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    return []

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
def save_sent_news(sent_news):
    with open(SENT_LIST_FILE, 'w', encoding='utf-8') as f:
        json.dump(sent_news, f, ensure_ascii=False, indent=4)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–ª–æ–≤
def contains_must_have_words(text):
    return any(word in text for word in MUST_HAVE_WORDS)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö —Å–ª–æ–≤
def contains_ignore_words(text, ignore_words):
    return any(word in text for word in ignore_words)

# –û—á–∏—Å—Ç–∫–∞ URL
def clean_url(url):
    # –£–¥–∞–ª—è–µ–º –≤—Å—ë –¥–æ "https://"
    if 'https://' in url:
        url = url.split('https://')[1]
        url = 'https://' + url
    if '&sa=U' in url:
        url = url.split('&sa=U')[0]
    if '&ved=' in url:
        url = url.split('&ved=')[0]
    return url

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å—Å—ã–ª–∫–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º aiohttp
async def is_link_working(session, link):
    try:
        async with session.get(link, timeout=10) as response:
            return response.status == 200
    except Exception as e:
        logging.warning(f'__GOOGLE__–ü—Ä–æ–±–ª–µ–º–∞ —Å —Å—Å—ã–ª–∫–æ–π: {link} - {e}')
        return False

# –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ Google News —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º aiohttp
async def get_news(session, keyword):
    query = f'https://www.google.ru/search?q={keyword}&tbm=nws&tbs=qdr:w'
    headers = {
        'User-Agent': random.choice(USER_AGENTS)  # –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä User-Agent
    }
    try:
        async with session.get(query, headers=headers) as response:
            if response.status == 200:
                text = await response.text()
                soup = BeautifulSoup(text, 'html.parser')
                results = []
                for item in soup.find_all('h3'):
                    title = item.get_text()
                    link = item.find_parent('a')['href']
                    link = clean_url(link)  # –û—á–∏—Å—Ç–∫–∞ —Å—Å—ã–ª–∫–∏
                    results.append({'title': title, 'link': link})
                return results
            else:
                logging.error(f'__GOOGLE__–û—à–∏–±–∫–∞ —Å Google: {response.status} –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: {keyword}')
                return []
    except Exception as e:
        logging.error(f'__GOOGLE__–û—à–∏–±–∫–∞ —Å Google: {e}')
        return []

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º aiohttp
async def send_to_telegram(session, title, link):
    url = f"https://api.telegram.org/bot{API_TOKEN}/sendMessage"
    message_text = f"{title}\n{link}\n‚õ≤@MonitoringFontanüì∞#fontan"
    payload = {
        'chat_id': CHANNEL_ID,
        'text': message_text
    }
    try:
        async with session.post(url, data=payload) as response:
            if response.status == 200:
                logging.info('__GOOGLE__–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.')
            else:
                text = await response.text()
                logging.error(f'__GOOGLE__–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {response.status} - {text}')
    except Exception as e:
        logging.error(f'__GOOGLE__–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}')

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    sent_news = load_sent_news()
    async with aiohttp.ClientSession() as session:  # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é aiohttp
        while True:  # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª
            for keyword in KEYWORDS:
                results = await get_news(session, keyword)
                logging.info(f'__GOOGLE__–ù–∞–π–¥–µ–Ω–æ {len(results)} : {keyword}')
                for result in results:
                    title = result['title']
                    link = result['link']

                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ —Å–ª–æ–≤–∞
                    if contains_ignore_words(title, IGNORE_WORDS) or contains_ignore_words(link, IGNORE_WORDS_LINK):
                        logging.info(f'__GOOGLE__–ù–∞–π–¥–µ–Ω –∏–≥–Ω–æ—Ä: {link}')
                        continue

                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞
                    if not contains_must_have_words(title):
                        logging.info(f'__GOOGLE__–ù–µ—Ç —Å–ª–æ–≤: {title}')
                        continue

                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π (–ø–æ link –ò–õ–ò title)
                    if any(news['link'] == link or news['title'] == title for news in sent_news):
                        logging.info(f'__GOOGLE__–ù–æ–≤–æ—Å—Ç—å —É–∂–µ –µ—Å—Ç—å: {title} - {link}')
                        continue

                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å—Å—ã–ª–∫–∏
                    if not await is_link_working(session, link):
                        logging.warning(f'__GOOGLE__–°—Å—ã–ª–∫–∞ –Ω–µ —Ä–∞–±–æ—á–∞—è: {link}')
                        continue

                    # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ—Å—Ç–∏ –≤ Telegram
                    await send_to_telegram(session, title, link)
                    sent_news.append({'title': title, 'link': link})
                    save_sent_news(sent_news)
                await asyncio.sleep(random.randint(222, 505))  # –û—Ç 30 –º–∏–Ω—É—Ç –¥–æ 1 —á–∞—Å–∞

# –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
if __name__ == "__main__":
    asyncio.run(main())
